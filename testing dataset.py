# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xvPbG2JWXnt6xZO1n8x5Nn7DSA8DSpfy
"""

# !pip install fastDamerauLevenshtein

import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split
from fastDamerauLevenshtein import damerauLevenshtein
import csv

def load_dictionary(file_path):
    with open(file_path, "r", encoding="utf-8") as f:
        dictionary = f.read().splitlines()
    return dictionary



column_names = ['index', 'true', 'false']

df = pd.read_csv('insert_testing.csv',header=None, names=column_names)
print('selesai df')

file_path = "kbbi.txt"
word_list = load_dictionary(file_path)

def damerau_levenshtein_distance(str1, str2):
    len_str1 = len(str1)
    len_str2 = len(str2)
    distance_matrix = [[0] * (len_str2 + 1) for _ in range(len_str1 + 1)]

    for i in range(len_str1 + 1):
        distance_matrix[i][0] = i

    for j in range(len_str2 + 1):
        distance_matrix[0][j] = j

    for i in range(1, len_str1 + 1):
        for j in range(1, len_str2 + 1):
            if str1[i-1] == str2[j-1]:
                cost = 0
            else:
                cost = 1

            deletion = distance_matrix[i-1][j] + 1
            insertion = distance_matrix[i][j-1] + 1
            substitution = distance_matrix[i-1][j-1] + cost

            distance_matrix[i][j] = min(deletion, insertion, substitution)

            if i > 1 and j > 1 and str1[i-1] == str2[j-2] and str1[i-2] == str2[j-1]:
                transposition = distance_matrix[i-2][j-2] + cost
                distance_matrix[i][j] = min(distance_matrix[i][j], transposition)

    return distance_matrix[len_str1][len_str2]

def damerau_levenshtein_distance1(str1, str2):
  return damerauLevenshtein(str1, str2,similarity=False)

def spell_correction(word, word_list):
    min_distance = float('inf')
    min_word = word
    for w in word_list:
        distance = damerau_levenshtein_distance1(word, w)
        if distance < min_distance:
            min_distance = distance
            min_word = w
    return min_word

def spell_suggest(word, word_list):
    suggestions = []
    # print(type(word_list))
    for w in word_list:
        distance = damerau_levenshtein_distance1(word, w)
        if distance == 1:
            suggestions.append(w)
    return suggestions

def cek_kata(word,kamus):

  suggestions = spell_suggest(word, kamus)
  if suggestions:
    # print(f"{word} ejaan11 yang salah. Mungkin Anda maksud: {', '.join(suggestions)}")
    return suggestions[0]
  else:
    # Spell correction
    correction = spell_correction(word, kamus)
    # print(f"{word} ejaan21 yang salah. Mungkin yang dimaksud adalah: {correction}")
    return correction

with open('insert_testing_data.csv', mode='w', newline='') as file:
    writer = csv.writer(file)
    x = 0
    # write elements of list
    for index2,i in df.iterrows():
        print(x)
        row = [i['index'],i['true'],i['false'],cek_kata(i['false'],word_list)]
        writer.writerow(row)
        x += 1
    print("File written successfully")

file.close()